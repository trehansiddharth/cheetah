"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class contact_estimate_t(object):
    __slots__ = ["taud_filt", "f_foot", "contact_state", "contact_probability", "transition_state"]

    def __init__(self):
        self.taud_filt = [ 0.0 for dim0 in range(18) ]
        self.f_foot = [ 0.0 for dim0 in range(12) ]
        self.contact_state = [ 0.0 for dim0 in range(4) ]
        self.contact_probability = [ 0.0 for dim0 in range(4) ]
        self.transition_state = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(contact_estimate_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>18d', *self.taud_filt[:18]))
        buf.write(struct.pack('>12d', *self.f_foot[:12]))
        buf.write(struct.pack('>4d', *self.contact_state[:4]))
        buf.write(struct.pack('>4d', *self.contact_probability[:4]))
        buf.write(struct.pack('>4d', *self.transition_state[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != contact_estimate_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return contact_estimate_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = contact_estimate_t()
        self.taud_filt = struct.unpack('>18d', buf.read(144))
        self.f_foot = struct.unpack('>12d', buf.read(96))
        self.contact_state = struct.unpack('>4d', buf.read(32))
        self.contact_probability = struct.unpack('>4d', buf.read(32))
        self.transition_state = struct.unpack('>4d', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if contact_estimate_t in parents: return 0
        tmphash = (0x3a9e2e811f07ea18) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if contact_estimate_t._packed_fingerprint is None:
            contact_estimate_t._packed_fingerprint = struct.pack(">Q", contact_estimate_t._get_hash_recursive([]))
        return contact_estimate_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

